diff --git a/hashable.cabal b/hashable.cabal
index 10aa4cd..dbed582 100644
--- a/hashable.cabal
+++ b/hashable.cabal
@@ -84,10 +83,22 @@ library
     , bytestring  >=0.10.8.2 && <0.13
     , containers  >=0.5.10.2 && <0.7
     , deepseq     >=1.4.3.0  && <1.6
-    , filepath    >=1.4.1.2  && <1.5
     , ghc-prim
     , text        >=1.2.3.0  && <1.3  || >=2.0 && <2.2
 
+  if impl(ghc >=9.2)
+    -- depend on os-string on newer GHCs only.
+    -- os-string has tight lower bound on bytestring, which prevents
+    -- using bundled version on older GHCs.
+    build-depends: os-string >=2.0.2
+
+    -- we also ensure that we can get filepath-1.5 only with GHC-9.2
+    -- therefore there is else-branch with stricter upper bound.
+    build-depends: filepath >=1.4.1.2 && <1.6
+
+  else
+    build-depends: filepath >=1.4.1.2 && <1.5
+
   if !impl(ghc >=9.2)
     build-depends: base-orphans >=0.8.6 && <0.10
 
@@ -152,6 +163,7 @@ test-suite hashable-tests
   build-depends:
       base
     , bytestring
+    , filepath
     , ghc-prim
     , hashable
     , HUnit
@@ -162,6 +174,9 @@ test-suite hashable-tests
     , test-framework-quickcheck2  >=0.2.9
     , text                        >=0.11.0.5
 
+  if impl(ghc >=9.2)
+    build-depends: os-string
+
   if !os(windows)
     build-depends:    unix
     cpp-options:      -DHAVE_MMAP
diff --git a/src/Data/Hashable/Class.hs b/src/Data/Hashable/Class.hs
index 4f60d03..fcf9f59 100644
--- a/src/Data/Hashable/Class.hs
+++ b/src/Data/Hashable/Class.hs
@@ -4,6 +4,7 @@
 {-# LANGUAGE FlexibleContexts      #-}
 {-# LANGUAGE MagicHash             #-}
 {-# LANGUAGE MultiParamTypeClasses #-}
+{-# LANGUAGE PackageImports        #-}
 {-# LANGUAGE PolyKinds             #-}
 {-# LANGUAGE ScopedTypeVariables   #-}
 {-# LANGUAGE Trustworthy           #-}
@@ -167,7 +168,25 @@ import Data.Tuple (Solo (..))
 import GHC.Tuple (Solo (..))
 #endif
 
-#if MIN_VERSION_filepath(1,4,100)
+-- filepath >=1.4.100 && <1.5 has System.OsString.Internal.Types module
+#if MIN_VERSION_filepath(1,4,100) && !(MIN_VERSION_filepath(1,5,0))
+#define HAS_OS_STRING_filepath 1
+#else
+#define HAS_OS_STRING_filepath 0
+#endif
+
+-- if we depend on os_string module, then it has System.OsString.Internal.Types
+-- module as well
+#ifdef MIN_VERSION_os_string
+#define HAS_OS_STRING_os_string 1
+#else
+#define HAS_OS_STRING_os_string 0
+#endif
+
+#if HAS_OS_STRING_filepath && HAS_OS_STRING_os_string
+import "os-string" System.OsString.Internal.Types (OsString (..), PosixString (..), WindowsString (..))
+import qualified "filepath" System.OsString.Internal.Types as FP (OsString (..), PosixString (..), WindowsString (..))
+#elif HAS_OS_STRING_filepath || HAS_OS_STRING_os_string
 import System.OsString.Internal.Types (OsString (..), PosixString (..), WindowsString (..))
 #endif
 
@@ -666,7 +685,7 @@ instance Hashable BSI.ShortByteString where
     hashWithSalt salt sbs@(BSI.SBS ba) =
         hashByteArrayWithSalt ba 0 (BSI.length sbs) (hashWithSalt salt (BSI.length sbs))
 
-#if MIN_VERSION_filepath(1,4,100)
+#if HAS_OS_STRING_filepath || HAS_OS_STRING_os_string
 -- | @since 1.4.2.0
 instance Hashable PosixString where
     hashWithSalt salt (PosixString s) = hashWithSalt salt s
@@ -680,6 +699,17 @@ instance Hashable OsString where
     hashWithSalt salt (OsString s) = hashWithSalt salt s
 #endif
 
+#if HAS_OS_STRING_filepath && HAS_OS_STRING_os_string
+instance Hashable FP.PosixString where
+    hashWithSalt salt (FP.PosixString s) = hashWithSalt salt s
+
+instance Hashable FP.WindowsString where
+    hashWithSalt salt (FP.WindowsString s) = hashWithSalt salt s
+
+instance Hashable FP.OsString where
+    hashWithSalt salt (FP.OsString s) = hashWithSalt salt s
+#endif
+
 #if MIN_VERSION_text(2,0,0)
 
 instance Hashable T.Text where
