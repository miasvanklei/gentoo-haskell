--- a/apply-refact.cabal
+++ b/apply-refact.cabal
@@ -35,7 +35,7 @@
   build-depends: base >=4.16 && < 5
                , refact >= 0.2
                , ghc-boot-th
-               , ghc-exactprint ^>= 1.5.0 || ^>= 1.6.0 || ^>= 1.7.0 || ^>= 1.8.0
+               , ghc-exactprint ^>= 1.5.0 || ^>= 1.6.0 || ^>= 1.7.0 || ^>= 1.8.0 || ^>= 1.9.0
                , containers >= 0.6.0.1 && < 0.8
                , extra >= 1.7.3
                , syb >= 0.7.1
@@ -45,6 +45,8 @@
                , uniplate >= 1.6.13
                , unix-compat >= 0.5.2
                , directory >= 1.3
+  if (impl(ghc >= 9.10) && impl(ghc < 9.11))
+    build-depends: ghc ^>= 9.10
   if (impl(ghc >= 9.8) && impl(ghc < 9.9))
     build-depends: ghc ^>= 9.8
   if (impl(ghc >= 9.6) && impl(ghc < 9.7))
diff --git a/src/Refact/Compat.hs b/src/Refact/Compat.hs
index f497969..c1f04da 100644
--- a/src/Refact/Compat.hs
+++ b/src/Refact/Compat.hs
@@ -67,9 +67,17 @@ module Refact.Compat (
   pattern RealSrcSpan',
   RealSrcSpan (..),
   SrcSpanLess,
+  SrcAnn,
+  OpAppAnn,
   combineSrcSpans,
   composeSrcSpan,
   decomposeSrcSpan,
+  fromSrcSpanAnn,
+  toSrcSpanAnn,
+  addCommentsToSrcAnn,
+  mkAnchor,
+  lEpaCommentRealSrcSpan,
+  srcSpanAnnDeltaPos,
 
   -- * StringBuffer
   stringToStringBuffer,
@@ -98,10 +106,18 @@ module Refact.Compat (
   -- * GHC 9.4 stuff
   initParserOpts,
 #endif
+
+  -- * ghc-exactprint stuff
+  refactOptions,
+  transferEntryDP,
+  transferEntryDP',
+  showAst
 ) where
 
 import Control.Monad.Trans.State.Strict (StateT)
 import Data.Data (Data)
+import Data.Dynamic (Typeable)
+import Data.Functor.Identity (Identity (..))
 import qualified GHC
 import GHC.Data.Bag (unitBag, bagToList)
 import GHC.Data.FastString (FastString, mkFastString)
@@ -114,10 +130,12 @@ import GHC.Driver.Config.Parser
 import GHC.Driver.Errors.Types (ErrorMessages, ghcUnknownMessage, GhcMessage)
 #endif
 import GHC.Driver.Session hiding (initDynFlags)
-#if MIN_VERSION_ghc(9,6,0)
+#if MIN_VERSION_ghc(9,10,0)
 import GHC.Hs hiding (Pat, Stmt, parseModuleName)
+#elif MIN_VERSION_ghc(9,6,0)
+import GHC.Hs hiding (Pat, SrcAnn, SrcSpanAnn' (..), Stmt, addCommentsToSrcAnn, parseModuleName)
 #else
-import GHC.Hs hiding (Pat, Stmt)
+import GHC.Hs hiding (Pat, SrcAnn, SrcSpanAnn' (..), Stmt, addCommentsToSrcAnn)
 #endif
 import GHC.Parser.Header (getOptions)
 #if MIN_VERSION_ghc(9,8,0)
@@ -146,9 +164,22 @@ import GHC.Utils.Panic
   , pprPanic
   )
 import Language.Haskell.GHC.ExactPrint.Parsers (Parser)
-import Language.Haskell.GHC.ExactPrint.Utils
+import qualified Language.Haskell.GHC.ExactPrint as EP
+import qualified Language.Haskell.GHC.ExactPrint.ExactPrint as EP
+import Language.Haskell.GHC.ExactPrint.Utils (badRealSrcSpan)
 import Refact.Types (Refactoring)
 
+#if MIN_VERSION_ghc_exactprint(1,9,0)
+import Language.Haskell.GHC.ExactPrint.Utils (showAst)
+#else
+
+import Language.Haskell.GHC.ExactPrint.ExactPrint (showAst)
+#endif
+
+#if !MIN_VERSION_ghc_exactprint(1,10,0)
+import qualified Language.Haskell.GHC.ExactPrint.Types as EP
+#endif
+
 type MonadFail' = MonadFail
 
 #if MIN_VERSION_ghc(9,6,0)
@@ -171,7 +202,11 @@ ppp pst = concatMap unDecorated $ fmap (diagnosticMessage . errMsgDiagnostic) $
 ppp pst = concatMap unDecorated (errMsgDiagnostic <$> bagToList pst)
 #endif
 
+#if MIN_VERSION_ghc(9,10,0)
+type FunBind = HsMatchContext (LIdP (NoGhcTc GhcPs))
+#else
 type FunBind = HsMatchContext GhcPs
+#endif
 
 pattern RealSrcLoc' :: RealSrcLoc -> SrcLoc
 pattern RealSrcLoc' r <- RealSrcLoc r _ where
@@ -237,6 +272,88 @@ setAnnSpanFile :: FastString -> AnnSpan -> AnnSpan
 setAnnSpanFile =
   setRealSrcSpanFile
 
+#if MIN_VERSION_ghc(9,10,0)
+toSrcSpanAnn :: GHC.EpAnn ann -> GHC.SrcSpan -> GHC.EpAnn ann
+toSrcSpanAnn ann = const ann
+#else
+toSrcSpanAnn :: GHC.EpAnn ann -> GHC.SrcSpan -> GHC.SrcAnn ann
+toSrcSpanAnn = GHC.SrcSpanAnn
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+fromSrcSpanAnn :: GHC.EpAnn ann -> (GHC.EpAnn ann, GHC.SrcSpan)
+fromSrcSpanAnn ann = (ann, UnhelpfulSpan UnhelpfulNoLocationInfo)
+#else
+fromSrcSpanAnn :: GHC.SrcAnn ann -> (GHC.EpAnn ann, GHC.SrcSpan)
+fromSrcSpanAnn (GHC.SrcSpanAnn ann s) = (ann, s)
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+srcSpanAnnDeltaPos :: GHC.EpAnn ann -> Maybe GHC.DeltaPos
+srcSpanAnnDeltaPos (GHC.EpAnn (GHC.EpaDelta dp _) _ _) = Just dp
+srcSpanAnnDeltaPos _ = Nothing
+#else
+srcSpanAnnDeltaPos :: GHC.SrcAnn ann -> Maybe GHC.DeltaPos
+srcSpanAnnDeltaPos srcAnn = case GHC.ann srcAnn of
+  GHC.EpAnn a _ _ | GHC.MovedAnchor dp <- GHC.anchor_op a -> Just dp
+  _ -> Nothing
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+type SrcAnn a = GHC.EpAnn a
+#else
+type SrcAnn a = GHC.SrcAnn a
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+addCommentsToSrcAnn :: SrcAnn ann -> GHC.EpAnnComments -> SrcAnn ann
+addCommentsToSrcAnn (GHC.EpAnn e a cs) cs' = GHC.EpAnn e a (cs <> cs')
+#else
+addCommentsToSrcAnn :: Monoid ann => SrcAnn ann -> GHC.EpAnnComments -> SrcAnn ann
+addCommentsToSrcAnn = GHC.addCommentsToSrcAnn
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+type OpAppAnn = [GHC.AddEpAnn]
+#else
+type OpAppAnn = GHC.EpAnn [GHC.AddEpAnn]
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+mkAnchor :: AnnSpan -> GHC.DeltaPos -> GHC.NoCommentsLocation
+mkAnchor _ dp = GHC.EpaDelta dp GHC.NoComments
+#else
+mkAnchor :: AnnSpan -> GHC.DeltaPos -> GHC.Anchor
+mkAnchor r = GHC.Anchor r . GHC.MovedAnchor
+#endif
+
+lEpaCommentRealSrcSpan :: GHC.LEpaComment -> Maybe GHC.RealSrcSpan
+#if MIN_VERSION_ghc(9,10,0)
+lEpaCommentRealSrcSpan (GHC.L l _) = case l of
+  GHC.EpaSpan (GHC.RealSrcSpan rss _) -> Just rss
+  _ -> Nothing
+#else
+lEpaCommentRealSrcSpan (GHC.L (Anchor rss _) _) = Just rss
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+-- Copied from ghc-9.8.2
+instance Semigroup GHC.AnnList where
+  (GHC.AnnList a1 o1 c1 r1 t1) <> (GHC.AnnList a2 o2 c2 r2 t2)
+    = GHC.AnnList (a1 <> a2) (c o1 o2) (c c1 c2) (r1 <> r2) (t1 <> t2)
+    where
+      -- Left biased combination for the open and close annotations
+      c Nothing x = x
+      c x Nothing = x
+      c f _       = f
+#endif
+
+#if MIN_VERSION_ghc(9,10,0)
+-- Copied from ghc-9.8.2
+instance Monoid GHC.AnnListItem where
+  mempty = GHC.AnnListItem []
+#endif
+
 mkErr :: DynFlags -> SrcSpan -> String -> Errors
 #if MIN_VERSION_ghc(9,4,0)
 mkErr _df l s =
@@ -266,3 +383,35 @@ type ReplaceWorker a mod =
   Int ->
   Refactoring SrcSpan ->
   IO mod
+
+#if MIN_VERSION_ghc_exactprint(1,10,0)
+transferEntryDP ::
+  forall t1 t2 a b.
+  (Typeable t1, Typeable t2) =>
+  LocatedAn t1 a ->
+  LocatedAn t2 b ->
+  LocatedAn t2 b
+transferEntryDP = EP.transferEntryDP
+#else
+transferEntryDP ::
+  forall t1 t2 a b.
+  (Typeable t1, Typeable t2, Monoid t2) =>
+  LocatedAn t1 a ->
+  LocatedAn t2 b ->
+  LocatedAn t2 b
+transferEntryDP a b = let (c, _, _) = EP.runTransform (EP.transferEntryDP a b) in c
+#endif
+
+transferEntryDP' :: GHC.LHsDecl GHC.GhcPs -> GHC.LHsDecl GHC.GhcPs -> GHC.LHsDecl GHC.GhcPs
+#if MIN_VERSION_ghc_exactprint(1,10,0)
+transferEntryDP' = EP.transferEntryDP'
+#else
+transferEntryDP' a b = let (c, _, _) = EP.runTransform (EP.transferEntryDP' a b) in c
+#endif
+
+refactOptions :: EP.EPOptions Identity String
+#if MIN_VERSION_ghc_exactprint(1,10,0)
+refactOptions = EP.stringOptions
+#else
+refactOptions = EP.stringOptions {EP.epRigidity = EP.RigidLayout}
+#endif
diff --git a/src/Refact/Fixity.hs b/src/Refact/Fixity.hs
index f27cc8e..4a921f7 100644
--- a/src/Refact/Fixity.hs
+++ b/src/Refact/Fixity.hs
@@ -7,8 +7,10 @@ import Control.Monad.Trans.State
 import Data.Generics hiding (Fixity)
 import Data.Maybe
 import qualified GHC
-import Language.Haskell.GHC.ExactPrint
-import Refact.Compat (Fixity (..), SourceText (..), occNameString, rdrNameOcc)
+import qualified Language.Haskell.GHC.ExactPrint as EP
+import Refact.Compat (
+  Fixity (..), OpAppAnn, SourceText (..), occNameString, rdrNameOcc,
+  transferEntryDP)
 import Refact.Utils
 
 -- | Rearrange infix expressions to account for fixity.
@@ -20,7 +22,7 @@ applyFixities m = fst <$> runStateT (everywhereM (mkM expFix) m) ()
 expFix :: Expr -> StateT () IO Expr
 expFix (GHC.L loc (GHC.OpApp an l op r)) =
   mkOpAppRn baseFixities loc an l op (findFixity baseFixities op) r
-expFix e = return e
+expFix e = pure e
 
 getIdent :: Expr -> String
 getIdent (GHC.unLoc -> GHC.HsVar _ (GHC.L _ n)) = occNameString . rdrNameOcc $ n
@@ -31,7 +33,7 @@ getIdent _ = error "Must be HsVar"
 mkOpAppRn ::
   [(String, GHC.Fixity)] ->
   GHC.SrcSpanAnnA ->
-  GHC.EpAnn [GHC.AddEpAnn] ->
+  OpAppAnn ->
   Expr -> -- Left operand; already rearranged
   Expr ->
   GHC.Fixity -> -- Operator and fixity
@@ -41,15 +43,15 @@ mkOpAppRn ::
 -- (e11 `op1` e12) `op2` e2
 mkOpAppRn fs loc an e1@(GHC.L _ (GHC.OpApp x1 e11 op1 e12)) op2 fix2 e2
   | nofix_error =
-    return $ GHC.L loc (GHC.OpApp an e1 op2 e2)
+    pure $ GHC.L loc (GHC.OpApp an e1 op2 e2)
   | associate_right = do
     -- liftIO $ putStrLn $ "mkOpAppRn:1:e1" ++ showAst e1
-    let e12' = setEntryDP e12 (GHC.SameLine 0)
+    let e12' = EP.setEntryDP e12 (GHC.SameLine 0)
     new_e <- mkOpAppRn fs loc' an e12' op2 fix2 e2
-    let (new_e',_,_) = runTransform $ transferEntryDP e12 new_e
-    let res = GHC.L loc (GHC.OpApp x1 e11 op1 new_e')
+    let new_e' = transferEntryDP e12 new_e
+        res = GHC.L loc (GHC.OpApp x1 e11 op1 new_e')
     -- liftIO $ putStrLn $ "mkOpAppRn:1:res" ++ showAst res
-    return res
+    pure res
   where
     loc' = GHC.combineLocsA e12 e2
     fix1 = findFixity fs op1
@@ -59,15 +61,15 @@ mkOpAppRn fs loc an e1@(GHC.L _ (GHC.OpApp x1 e11 op1 e12)) op2 fix2 e2
 --      (- neg_arg) `op` e2
 mkOpAppRn fs loc an e1@(GHC.L _ (GHC.NegApp an' neg_arg neg_name)) op2 fix2 e2
   | nofix_error =
-    return (GHC.L loc (GHC.OpApp an e1 op2 e2))
+    pure (GHC.L loc (GHC.OpApp an e1 op2 e2))
   | associate_right =
     do
       -- liftIO $ putStrLn $ "mkOpAppRn:2:e1" ++ showAst e1
       new_e <- mkOpAppRn fs loc' an neg_arg op2 fix2 e2
-      let new_e' = setEntryDP new_e (GHC.SameLine 0)
-      let res = setEntryDP (GHC.L loc (GHC.NegApp an' new_e' neg_name)) (GHC.SameLine 0)
+      let new_e' = EP.setEntryDP new_e (GHC.SameLine 0)
+      let res = EP.setEntryDP (GHC.L loc (GHC.NegApp an' new_e' neg_name)) (GHC.SameLine 0)
       -- liftIO $ putStrLn $ "mkOpAppRn:2:res" ++ showAst res
-      return res
+      pure res
   where
     loc' = GHC.combineLocsA neg_arg e2
     (nofix_error, associate_right) = GHC.compareFixity GHC.negateFixity fix2
@@ -78,7 +80,7 @@ mkOpAppRn _ loc an e1 op1 fix1 e2@(GHC.L _ GHC.NegApp {}) -- NegApp can occur on
   | not associate_right -- We *want* right association
     = do
     -- liftIO $ putStrLn $ "mkOpAppRn:3:e1" ++ showAst (GHC.L loc (GHC.OpApp an e1 op1 e2))
-    return $ GHC.L loc (GHC.OpApp an e1 op1 e2)
+    pure $ GHC.L loc (GHC.OpApp an e1 op1 e2)
   where
     (_, associate_right) = GHC.compareFixity fix1 GHC.negateFixity
 
@@ -87,7 +89,7 @@ mkOpAppRn _ loc an e1 op1 fix1 e2@(GHC.L _ GHC.NegApp {}) -- NegApp can occur on
 mkOpAppRn _ loc an e1 op _fix e2 -- Default case, no rearrangment
   = do
   -- liftIO $ putStrLn $ "mkOpAppRn:4:e1" ++ showAst (GHC.L loc (GHC.OpApp an e1 op e2))
-  return $ GHC.L loc (GHC.OpApp an e1 op e2)
+  pure $ GHC.L loc (GHC.OpApp an e1 op e2)
 
 -- ---------------------------------------------------------------------
 
diff --git a/src/Refact/Internal.hs b/src/Refact/Internal.hs
index 0a8c8d5..4cb51bd 100644
--- a/src/Refact/Internal.hs
+++ b/src/Refact/Internal.hs
@@ -44,19 +44,10 @@ import Language.Haskell.GHC.ExactPrint
     exactPrint,
     getEntryDP,
     makeDeltaAst,
-    runTransform,
     setEntryDP,
-    transferEntryDP,
-    transferEntryDP',
-  )
-import Language.Haskell.GHC.ExactPrint.ExactPrint
-  ( EPOptions,
-    epRigidity,
-    exactPrintWithOptions,
-    stringOptions,
   )
+import Language.Haskell.GHC.ExactPrint.ExactPrint (exactPrintWithOptions)
 import Language.Haskell.GHC.ExactPrint.Parsers
-import Language.Haskell.GHC.ExactPrint.Types
 import Language.Haskell.GHC.ExactPrint.Utils (ss2pos)
 import Refact.Compat
   ( AnnSpan,
@@ -67,12 +58,15 @@ import Refact.Compat
     Module,
     ReplaceWorker,
     -- combineSrcSpans,
+    addCommentsToSrcAnn,
     combineSrcSpansA,
     composeSrcSpan,
     getOptions,
     gopt_set,
     handleGhcException,
     impliedXFlags,
+    lEpaCommentRealSrcSpan,
+    mkAnchor,
     mkErr,
     occName,
     occNameString,
@@ -80,10 +74,14 @@ import Refact.Compat
     parseDynamicFilePragma,
     parseModuleName,
     ppr,
+    refactOptions,
     setSrcSpanFile,
     showSDocUnsafe,
+    srcSpanAnnDeltaPos,
     srcSpanToAnnSpan,
     stringToStringBuffer,
+    transferEntryDP,
+    transferEntryDP',
     xFlags,
     xopt_set,
     xopt_unset,
@@ -114,9 +112,6 @@ import System.IO.Error (mkIOError)
 import System.IO.Extra
 import System.IO.Unsafe (unsafePerformIO)
 
-refactOptions :: EPOptions Identity String
-refactOptions = stringOptions {epRigidity = RigidLayout}
-
 -- | Apply a set of refactorings as supplied by hlint
 apply ::
   Maybe (Int, Int) ->
@@ -317,9 +312,9 @@ runRefactoring m = \case
                 (GHC.L l' d') = setEntryDP (GHC.L l d) (GHC.DifferentLine 1 0)
                 comment =
                   GHC.L
-                    (GHC.Anchor r (GHC.MovedAnchor dp))
+                    (mkAnchor r dp)
                     (GHC.EpaComment (GHC.EpaLineComment newComment) r)
-                l'' = GHC.addCommentsToSrcAnn l' (GHC.EpaComments [comment])
+                l'' = addCommentsToSrcAnn l' (GHC.EpaComments [comment])
              in GHC.L l'' d'
           else old
   RemoveAsKeyword {..} -> pure (removeAsKeyword m)
@@ -333,7 +328,13 @@ runRefactoring m = \case
 modifyComment :: (Data a) => GHC.SrcSpan -> String -> a -> a
 modifyComment pos newComment = transformBi go
   where
-#if MIN_VERSION_ghc(9,4,0)
+#if MIN_VERSION_ghc(9,10,0)
+    newTok :: GHC.EpaCommentTok -> GHC.EpaCommentTok
+    newTok (GHC.EpaDocComment _) = GHC.EpaDocComment $ mkGeneratedHsDocString newComment
+    newTok (GHC.EpaDocOptions _) = GHC.EpaDocOptions newComment
+    newTok (GHC.EpaLineComment _) = GHC.EpaLineComment newComment
+    newTok (GHC.EpaBlockComment _) = GHC.EpaBlockComment newComment
+#elif MIN_VERSION_ghc(9,4,0)
     newTok :: GHC.EpaCommentTok -> GHC.EpaCommentTok
     newTok (GHC.EpaDocComment _) = GHC.EpaDocComment $ mkGeneratedHsDocString newComment
     newTok (GHC.EpaDocOptions _) = GHC.EpaDocOptions newComment
@@ -352,10 +353,11 @@ modifyComment pos newComment = transformBi go
 #endif
 
     go :: GHC.LEpaComment -> GHC.LEpaComment
-    go old@(GHC.L (GHC.Anchor l o) (GHC.EpaComment t r)) =
-      if ss2pos l == ss2pos (GHC.realSrcSpan pos)
-        then GHC.L (GHC.Anchor l o) (GHC.EpaComment (newTok t) r)
-        else old
+    go old@(GHC.L loc (GHC.EpaComment t r)) =
+      let mrss = lEpaCommentRealSrcSpan old
+      in if fmap ss2pos mrss == Just (ss2pos (GHC.realSrcSpan pos))
+           then GHC.L loc (GHC.EpaComment (newTok t) r)
+           else old
 
 droppedComments :: [Refactoring GHC.SrcSpan] -> Module -> Module -> Bool
 droppedComments rs orig_m m = not (all (`elem` current_comments) orig_comments)
@@ -474,7 +476,7 @@ resolveRdrName m = resolveRdrName' (modifyAnnKey m)
 doGenReplacement :: forall ast a. DoGenReplacement GHC.AnnListItem ast a
 doGenReplacement _ p new old
   | p old = do
-    let (new', _, _) = runTransform $ transferEntryDP old new
+    let new' = transferEntryDP old new
     put True
     pure new'
   -- If "f a = body where local" doesn't satisfy the predicate, but "f a = body" does,
@@ -505,7 +507,7 @@ doGenReplacement _ p new old
             newMatch
             (combineSrcSpansA (GHC.noAnnSrcSpan newLocalLoc) locMatch)
             newGRHSs
-        (newWithLocalBinds, _, _) = runTransform $ transferEntryDP' old newWithLocalBinds0
+        newWithLocalBinds = transferEntryDP' old newWithLocalBinds0
 
     put True
     pure $ composeSrcSpan newWithLocalBinds
@@ -587,14 +589,17 @@ replaceWorker m parser seed Replace {..} = do
             _ -> True
           e' =
             if isDo
+#if MIN_VERSION_ghc(9,10,0)
+#else
               && manchorOp an == Just (GHC.MovedAnchor (GHC.SameLine 0))
-              && manchorOp (GHC.ann ls) == Just (GHC.MovedAnchor (GHC.SameLine 0))
+#endif
+              && srcSpanAnnDeltaPos ls == Just (GHC.SameLine 0)
               then GHC.L l (GHC.HsDo an v (setEntryDP (GHC.L ls stmts) (GHC.SameLine 1)))
               else e
       ensureExprSpace e@(GHC.L l (GHC.HsApp x (GHC.L la a) (GHC.L lb b))) = e' -- ensureAppSpace
         where
           e' =
-            if manchorOp (GHC.ann lb) == Just (GHC.MovedAnchor (GHC.SameLine 0))
+            if srcSpanAnnDeltaPos lb == Just (GHC.SameLine 0)
               then GHC.L l (GHC.HsApp x (GHC.L la a) (setEntryDP (GHC.L lb b) (GHC.SameLine 1)))
               else e
       ensureExprSpace e = e
@@ -612,9 +617,12 @@ replaceWorker m parser seed Replace {..} = do
     _ -> pure m
 replaceWorker m _ _ _ = pure m
 
+#if MIN_VERSION_ghc(9,10,0)
+#else
 manchorOp :: GHC.EpAnn ann -> Maybe GHC.AnchorOperation
 manchorOp GHC.EpAnnNotUsed = Nothing
 manchorOp (GHC.EpAnn a _ _) = Just (GHC.anchor_op a)
+#endif
 
 data NotFound = NotFound
   { nfExpected :: String,
@@ -728,7 +736,11 @@ parseModuleWithArgs libdir (es, ds) fp = ghcWrapper libdir $ do
       -- pure $ postParseTransform res rigidLayout
       case postParseTransform res of
         Left e -> pure (Left e)
+#if MIN_VERSION_ghc_exactprint(1,10,0)
+        Right ast -> pure $ Right ast
+#else
         Right ast -> pure $ Right (makeDeltaAst ast)
+#endif
 
 -- | Parse the input into (enabled extensions, disabled extensions, invalid input).
 -- Implied extensions are automatically added. For example, @FunctionalDependencies@
diff --git a/src/Refact/Run.hs b/src/Refact/Run.hs
index e7c9b81..bb7ff62 100644
--- a/src/Refact/Run.hs
+++ b/src/Refact/Run.hs
@@ -7,11 +7,11 @@ import Data.List hiding (find)
 import Data.Maybe
 import Data.Version
 import Debug.Trace
-import Language.Haskell.GHC.ExactPrint.ExactPrint (showAst)
 import qualified GHC.Paths
 import Options.Applicative
 import Paths_apply_refact
 import Refact.Apply (parseExtensions)
+import Refact.Compat (showAst)
 import Refact.Fixity
 import Refact.Internal
   ( Verbosity (..),
diff --git a/src/Refact/Utils.hs b/src/Refact/Utils.hs
index c957d07..e4cf72f 100644
--- a/src/Refact/Utils.hs
+++ b/src/Refact/Utils.hs
@@ -1,5 +1,7 @@
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE PatternSynonyms #-}
 {-# LANGUAGE RecordWildCards #-}
+{-# LANGUAGE ViewPatterns #-}
 
 module Refact.Utils
   ( -- * Synonyms
@@ -39,13 +41,14 @@ import Data.Data
 import Data.Generics (everywhere, mkT)
 import Data.Typeable
 import qualified GHC
-import Language.Haskell.GHC.ExactPrint
 import Refact.Compat
   ( AnnSpan,
     FastString,
     FunBind,
     Module,
     annSpanToSrcSpan,
+    fromSrcSpanAnn,
+    toSrcSpanAnn,
     mkFastString,
     setAnnSpanFile,
     setRealSrcSpanFile,
@@ -53,6 +56,7 @@ import Refact.Compat
     srcSpanToAnnSpan,
     pattern RealSrcLoc',
     pattern RealSrcSpan',
+    transferEntryDP,
   )
 import qualified Refact.Types as R
 
@@ -102,9 +106,9 @@ modifyAnnKey _m e1 e2 = do
   -- liftIO $ putStrLn $ "modifyAnnKey:e2" ++ showAst e2
   let e2_0 = handleBackquotes e1 e2
   -- liftIO $ putStrLn $ "modifyAnnKey:e2_0" ++ showAst e2_0
-  let (e2', _, _) = runTransform $ transferEntryDP e1 e2_0
+  let e2' = transferEntryDP e1 e2_0
   -- liftIO $ putStrLn $ "modifyAnnKey:e2'" ++ showAst e2'
-  return e2'
+  pure e2'
 
 -- | This function handles backquotes in two scenarios:
 --
@@ -118,7 +122,7 @@ modifyAnnKey _m e1 e2 = do
 --        should keep the backquotes, but currently no test case fails because of it.
 handleBackquotes ::
   forall t old new.
-  (Data t, Data old, Data new, Monoid t, Typeable t) =>
+  (Data t, Data old, Data new, Typeable t) =>
   GHC.LocatedAn t old ->
   GHC.LocatedAn t new ->
   GHC.LocatedAn t new
@@ -131,17 +135,20 @@ handleBackquotes old new@(GHC.L loc _) =
         ln' =
           if GHC.locA l == GHC.locA loc
             then case cast old :: Maybe (GHC.LHsExpr GHC.GhcPs) of
-              Just (GHC.L _ (GHC.HsVar _ (GHC.L (GHC.SrcSpanAnn (GHC.EpAnn _ ann _) _) _)))
+              Just (GHC.L _ (GHC.HsVar _ (GHC.L (fromSrcSpanAnn -> (GHC.EpAnn _ ann _, _)) _)))
                 -- scenario 1
                 | GHC.NameAnn GHC.NameBackquotes _ _ _ _ <- ann ->
-                  case ln of
-                    (GHC.SrcSpanAnn (GHC.EpAnn a _ cs) ll) -> GHC.SrcSpanAnn (GHC.EpAnn a ann cs) ll
-                    (GHC.SrcSpanAnn GHC.EpAnnNotUsed ll) ->
-                      GHC.SrcSpanAnn (GHC.EpAnn (GHC.spanAsAnchor ll) ann GHC.emptyComments) ll
+                  case fromSrcSpanAnn ln of
+                    (GHC.EpAnn a _ cs, ll) -> toSrcSpanAnn (GHC.EpAnn a ann cs) ll
+#if MIN_VERSION_ghc(9,10,0)
+#else
+                    (GHC.EpAnnNotUsed, ll) ->
+                      toSrcSpanAnn (GHC.EpAnn (GHC.spanAsAnchor ll) ann GHC.emptyComments) ll
+#endif
                 -- scenario 2
-                | GHC.SrcSpanAnn (GHC.EpAnn a ann' cs) ll <- ln,
+                | (GHC.EpAnn a ann' cs, ll) <- fromSrcSpanAnn ln,
                   GHC.NameAnn GHC.NameBackquotes _ _ _ _ <- ann' ->
-                  GHC.SrcSpanAnn (GHC.EpAnn a ann cs) ll
+                  toSrcSpanAnn (GHC.EpAnn a ann cs) ll
               Just _ -> ln
               Nothing -> ln
             else ln
diff --git a/tests/Test.hs b/tests/Test.hs
index a298c34..551db80 100644
--- a/tests/Test.hs
+++ b/tests/Test.hs
@@ -35,7 +35,7 @@ mkTests files = testGroup "Unit tests" (map mkTest files)
       let outfile = fp <.> "out"
           rfile   = fp <.> "refact"
           topts = Options
-                  { optionsTarget       = Just fp
+                  { optionsTarget        = Just fp
                   , optionsInplace       = False
                   , optionsOutput        = Just outfile
                   , optionsRefactFile    = Just rfile
