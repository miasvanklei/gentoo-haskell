diff --git a/haskell-language-server.cabal b/haskell-language-server.cabal
index 6f0aec554e..08f58f64c4 100644
--- a/haskell-language-server.cabal
+++ b/haskell-language-server.cabal
@@ -769,6 +769,9 @@ test-suite hls-hlint-plugin-tests
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-hlint-plugin/test
   main-is:          Main.hs
+  -- Work around https://gitlab.haskell.org/ghc/ghc/-/issues/24648
+  if os(darwin)
+    ghc-options: -optl-Wl,-ld_classic
   build-depends:
       aeson
     , base
@@ -912,11 +915,13 @@ library hls-pragmas-plugin
   hs-source-dirs:   plugins/hls-pragmas-plugin/src
   build-depends:
     , base                  >=4.12 && <5
+    , aeson
     , extra
     , fuzzy
     , ghcide                == 2.9.0.1
     , hls-plugin-api        == 2.9.0.1
     , lens
+    , lens-aeson
     , lsp
     , text
     , transformers
diff --git a/plugins/hls-cabal-plugin/src/Ide/Plugin/Cabal/Diagnostics.hs b/plugins/hls-cabal-plugin/src/Ide/Plugin/Cabal/Diagnostics.hs
index dc36a43482..5429ac0bb9 100644
--- a/plugins/hls-cabal-plugin/src/Ide/Plugin/Cabal/Diagnostics.hs
+++ b/plugins/hls-cabal-plugin/src/Ide/Plugin/Cabal/Diagnostics.hs
@@ -11,18 +11,21 @@ module Ide.Plugin.Cabal.Diagnostics
 )
 where
 
-import qualified Data.Text                   as T
-import           Development.IDE             (FileDiagnostic,
-                                              ShowDiagnostic (ShowDiag))
-import           Distribution.Fields         (showPError, showPWarning)
-import qualified Distribution.Parsec         as Syntax
-import           Ide.PluginUtils             (extendNextLine)
-import           Language.LSP.Protocol.Types (Diagnostic (..),
-                                              DiagnosticSeverity (..),
-                                              NormalizedFilePath,
-                                              Position (Position),
-                                              Range (Range),
-                                              fromNormalizedFilePath)
+import           Control.Lens                      ((&), (.~))
+import qualified Data.Text                         as T
+import           Development.IDE                   (FileDiagnostic)
+import           Development.IDE.Types.Diagnostics (fdLspDiagnosticL,
+                                                    ideErrorWithSource)
+import           Distribution.Fields               (showPError, showPWarning)
+import qualified Distribution.Parsec               as Syntax
+import           Ide.PluginUtils                   (extendNextLine)
+import           Language.LSP.Protocol.Lens        (range)
+import           Language.LSP.Protocol.Types       (Diagnostic (..),
+                                                    DiagnosticSeverity (..),
+                                                    NormalizedFilePath,
+                                                    Position (Position),
+                                                    Range (Range),
+                                                    fromNormalizedFilePath)
 
 -- | Produce a diagnostic for a fatal Cabal parser error.
 fatalParseErrorDiagnostic :: NormalizedFilePath -> T.Text -> FileDiagnostic
@@ -80,15 +83,11 @@ mkDiag
   -> T.Text
   -- ^ The message displayed by the editor
   -> FileDiagnostic
-mkDiag file diagSource sev loc msg = (file, ShowDiag,)
-    Diagnostic
-    { _range    = loc
-    , _severity = Just sev
-    , _source   = Just diagSource
-    , _message  = msg
-    , _code     = Nothing
-    , _tags     = Nothing
-    , _relatedInformation = Nothing
-    , _codeDescription = Nothing
-    , _data_ = Nothing
-    }
+mkDiag file diagSource sev loc msg =
+  ideErrorWithSource
+    (Just diagSource)
+    (Just sev)
+    file
+    msg
+    Nothing
+    & fdLspDiagnosticL . range .~ loc
diff --git a/plugins/hls-hlint-plugin/src/Ide/Plugin/Hlint.hs b/plugins/hls-hlint-plugin/src/Ide/Plugin/Hlint.hs
index b1c88210ad..14c43f8db8 100644
--- a/plugins/hls-hlint-plugin/src/Ide/Plugin/Hlint.hs
+++ b/plugins/hls-hlint-plugin/src/Ide/Plugin/Hlint.hs
@@ -211,9 +211,9 @@ rules recorder plugin = do
 
       diagnostics :: NormalizedFilePath -> Either ParseError [Idea] -> [FileDiagnostic]
       diagnostics file (Right ideas) =
-       (file, ShowDiag,) <$> catMaybes [ideaToDiagnostic i | i <- ideas]
+        [ideErrorFromLspDiag diag file Nothing | i <- ideas, Just diag <- [ideaToDiagnostic i]]
       diagnostics file (Left parseErr) =
-        [(file, ShowDiag, parseErrorToDiagnostic parseErr)]
+        [ideErrorFromLspDiag (parseErrorToDiagnostic parseErr) file Nothing]
 
 
       ideaToDiagnostic :: Idea -> Maybe Diagnostic
@@ -371,9 +371,11 @@ codeActionProvider ideState _pluginId (CodeActionParams _ _ documentId _ context
       allDiagnostics <- atomically $ getDiagnostics ideState
 
       let numHintsInDoc = length
-            [diagnostic | (diagnosticNormalizedFilePath, _, diagnostic) <- allDiagnostics
-                        , validCommand diagnostic
-                        , diagnosticNormalizedFilePath == docNormalizedFilePath
+            [lspDiagnostic
+            | diag <- allDiagnostics
+            , let lspDiagnostic = fdLspDiagnostic diag
+            , validCommand lspDiagnostic
+            , fdFilePath diag == docNormalizedFilePath
             ]
       let numHintsInContext = length
             [diagnostic | diagnostic <- diags
diff --git a/plugins/hls-pragmas-plugin/src/Ide/Plugin/Pragmas.hs b/plugins/hls-pragmas-plugin/src/Ide/Plugin/Pragmas.hs
index 13a6f08b4b..bd265b74db 100644
--- a/plugins/hls-pragmas-plugin/src/Ide/Plugin/Pragmas.hs
+++ b/plugins/hls-pragmas-plugin/src/Ide/Plugin/Pragmas.hs
@@ -17,6 +17,7 @@ module Ide.Plugin.Pragmas
 
 import           Control.Lens                             hiding (List)
 import           Control.Monad.IO.Class                   (MonadIO (liftIO))
+import qualified Data.Aeson                               as JSON
 import           Data.Char                                (isAlphaNum)
 import           Data.List.Extra                          (nubOrdOn)
 import qualified Data.Map                                 as M
@@ -120,8 +121,9 @@ suggest dflags diag =
 -- ---------------------------------------------------------------------
 
 suggestDisableWarning :: Diagnostic -> [PragmaEdit]
-suggestDisableWarning Diagnostic {_code}
-  | Just (LSP.InR (T.stripPrefix "-W" -> Just w)) <- _code
+suggestDisableWarning diagnostic
+  | Just (Just (JSON.String attachedReason)) <- diagnostic ^? attachedReason
+  , Just w <- T.stripPrefix "-W" attachedReason
   , w `notElem` warningBlacklist =
     pure ("Disable \"" <> w <> "\" warnings", OptGHC w)
   | otherwise = []
diff --git a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs
index e52349b3ac..ae58245734 100644
--- a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs
+++ b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs
@@ -65,6 +65,7 @@ import           Development.IDE.Plugin.Plugins.FillHole           (suggestFillH
 import           Development.IDE.Plugin.Plugins.FillTypeWildcard   (suggestFillTypeWildcard)
 import           Development.IDE.Plugin.Plugins.ImportUtils
 import           Development.IDE.Plugin.TypeLenses                 (suggestSignature)
+import           Development.IDE.Types.Diagnostics
 import           Development.IDE.Types.Exports
 import           Development.IDE.Types.Location
 import           Development.IDE.Types.Options
@@ -87,7 +88,6 @@ import           Language.LSP.Protocol.Types                       (ApplyWorkspa
                                                                     CodeActionKind (CodeActionKind_QuickFix),
                                                                     CodeActionParams (CodeActionParams),
                                                                     Command,
-                                                                    Diagnostic (..),
                                                                     MessageType (..),
                                                                     Null (Null),
                                                                     ShowMessageParams (..),
@@ -125,7 +125,7 @@ codeAction state _ (CodeActionParams _ _ (TextDocumentIdentifier uri) range _) =
   contents <- liftIO $ runAction "hls-refactor-plugin.codeAction.getUriContents" state $ getUriContents $ toNormalizedUri uri
   liftIO $ do
     let mbFile = toNormalizedFilePath' <$> uriToFilePath uri
-    allDiags <- atomically $ fmap (\(_, _, d) -> d) . filter (\(p, _, _) -> mbFile == Just p) <$> getDiagnostics state
+    allDiags <- atomically $ fmap fdLspDiagnostic . filter (\d -> mbFile == Just (fdFilePath d)) <$> getDiagnostics state
     (join -> parsedModule) <- runAction "GhcideCodeActions.getParsedModule" state $ getParsedModule `traverse` mbFile
     let
       textContents = fmap Rope.toText contents
diff --git a/plugins/hls-refactor-plugin/test/Main.hs b/plugins/hls-refactor-plugin/test/Main.hs
index 7144d14f2d..becc2a73d8 100644
--- a/plugins/hls-refactor-plugin/test/Main.hs
+++ b/plugins/hls-refactor-plugin/test/Main.hs
@@ -21,7 +21,6 @@ import           Data.Foldable
 import           Data.List.Extra
 import           Data.Maybe
 import qualified Data.Text                                as T
-import           Data.Tuple.Extra
 import           Development.IDE.GHC.Util
 import           Development.IDE.Plugin.Completions.Types (extendImportCommandId)
 import           Development.IDE.Test
@@ -1996,7 +1995,7 @@ suggestImportDisambiguationTests = testGroup "suggest import disambiguation acti
     compareHideFunctionTo = compareTwo "HideFunction.hs"
     withTarget file locs k = runWithExtraFiles "hiding" $ \dir -> do
         doc <- openDoc file "haskell"
-        void $ expectDiagnostics [(file, [(DiagnosticSeverity_Error, loc, "Ambiguous occurrence") | loc <- locs])]
+        void $ expectDiagnostics [(file, [(DiagnosticSeverity_Error, loc, "Ambiguous occurrence", Nothing) | loc <- locs])] -- Since GHC 9.8: GHC-87110
         actions <- getAllCodeActions doc
         k dir doc actions
     withHideFunction = withTarget ("HideFunction" <.> "hs")
@@ -2455,7 +2454,7 @@ deleteUnusedDefinitionTests = testGroup "delete unused definition action"
   where
     testFor sourceLines pos@(l,c) expectedTitle expectedLines = do
       docId <- createDoc "A.hs" "haskell" $ T.unlines sourceLines
-      expectDiagnostics [ ("A.hs", [(DiagnosticSeverity_Warning, pos, "not used")]) ]
+      expectDiagnostics [ ("A.hs", [(DiagnosticSeverity_Warning, pos, "not used", Nothing)]) ]
       action <- pickActionWithTitle expectedTitle =<< getCodeActions docId  (R l c l c)
       executeCodeAction action
       contentAfterAction <- documentContents docId
@@ -2471,8 +2470,8 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
       , "f = 1"
       ]
       (if ghcVersion >= GHC94
-        then [ (DiagnosticSeverity_Warning, (3, 4), "Defaulting the type variable") ]
-        else [ (DiagnosticSeverity_Warning, (3, 4), "Defaulting the following constraint") ])
+        then [ (DiagnosticSeverity_Warning, (3, 4), "Defaulting the type variable", Nothing) ]
+        else [ (DiagnosticSeverity_Warning, (3, 4), "Defaulting the following constraint", Nothing) ])
       "Add type annotation ‘Integer’ to ‘1’"
       [ "{-# OPTIONS_GHC -Wtype-defaults #-}"
       , "module A (f) where"
@@ -2490,8 +2489,8 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
       , "    in x"
       ]
       (if ghcVersion >= GHC94
-        then [ (DiagnosticSeverity_Warning, (4, 12), "Defaulting the type variable") ]
-        else [ (DiagnosticSeverity_Warning, (4, 12), "Defaulting the following constraint") ])
+        then [ (DiagnosticSeverity_Warning, (4, 12), "Defaulting the type variable", Nothing) ]
+        else [ (DiagnosticSeverity_Warning, (4, 12), "Defaulting the following constraint", Nothing) ])
       "Add type annotation ‘Integer’ to ‘3’"
       [ "{-# OPTIONS_GHC -Wtype-defaults #-}"
       , "module A where"
@@ -2510,8 +2509,8 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
       , "    in x"
       ]
       (if ghcVersion >= GHC94
-        then [ (DiagnosticSeverity_Warning, (4, 20), "Defaulting the type variable") ]
-        else [ (DiagnosticSeverity_Warning, (4, 20), "Defaulting the following constraint") ])
+        then [ (DiagnosticSeverity_Warning, (4, 20), "Defaulting the type variable", Nothing) ]
+        else [ (DiagnosticSeverity_Warning, (4, 20), "Defaulting the following constraint", Nothing) ])
       "Add type annotation ‘Integer’ to ‘5’"
       [ "{-# OPTIONS_GHC -Wtype-defaults #-}"
       , "module A where"
@@ -2532,12 +2531,12 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
       ]
       (if ghcVersion >= GHC94
         then
-          [ (DiagnosticSeverity_Warning, (6, 8), "Defaulting the type variable")
-          , (DiagnosticSeverity_Warning, (6, 16), "Defaulting the type variable")
+          [ (DiagnosticSeverity_Warning, (6, 8), "Defaulting the type variable", Nothing)
+          , (DiagnosticSeverity_Warning, (6, 16), "Defaulting the type variable", Nothing)
           ]
         else
-          [ (DiagnosticSeverity_Warning, (6, 8), "Defaulting the following constraint")
-          , (DiagnosticSeverity_Warning, (6, 16), "Defaulting the following constraint")
+          [ (DiagnosticSeverity_Warning, (6, 8), "Defaulting the following constraint", Nothing)
+          , (DiagnosticSeverity_Warning, (6, 16), "Defaulting the following constraint", Nothing)
           ])
       "Add type annotation ‘String’ to ‘\"debug\"’"
       [ "{-# OPTIONS_GHC -Wtype-defaults #-}"
@@ -2559,8 +2558,8 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
       , "f a = traceShow \"debug\" a"
       ]
       (if ghcVersion >= GHC94
-        then [ (DiagnosticSeverity_Warning, (6, 6), "Defaulting the type variable") ]
-        else [ (DiagnosticSeverity_Warning, (6, 6), "Defaulting the following constraint") ])
+        then [ (DiagnosticSeverity_Warning, (6, 6), "Defaulting the type variable", Nothing) ]
+        else [ (DiagnosticSeverity_Warning, (6, 6), "Defaulting the following constraint", Nothing) ])
       "Add type annotation ‘String’ to ‘\"debug\"’"
       [ "{-# OPTIONS_GHC -Wtype-defaults #-}"
       , "{-# LANGUAGE OverloadedStrings #-}"
@@ -2581,8 +2580,8 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
       , "f = seq (\"debug\" :: [Char]) (seq (\"debug\" :: [Char]) (traceShow \"debug\"))"
       ]
       (if ghcVersion >= GHC94
-        then [ (DiagnosticSeverity_Warning, (6, 54), "Defaulting the type variable") ]
-        else [ (DiagnosticSeverity_Warning, (6, 54), "Defaulting the following constraint") ])
+        then [ (DiagnosticSeverity_Warning, (6, 54), "Defaulting the type variable", Nothing) ]
+        else [ (DiagnosticSeverity_Warning, (6, 54), "Defaulting the following constraint", Nothing) ])
       "Add type annotation ‘String’ to ‘\"debug\"’"
       [ "{-# OPTIONS_GHC -Wtype-defaults #-}"
       , "{-# LANGUAGE OverloadedStrings #-}"
@@ -2597,7 +2596,7 @@ addTypeAnnotationsToLiteralsTest = testGroup "add type annotations to literals t
     testFor sourceLines diag expectedTitle expectedLines = do
       docId <- createDoc "A.hs" "haskell" $ T.unlines sourceLines
       expectDiagnostics [ ("A.hs", diag) ]
-      let cursors = map snd3 diag
+      let cursors = map (\(_, snd, _, _) -> snd) diag
           (ls, cs) = minimum cursors
           (le, ce) = maximum cursors
 
diff --git a/plugins/hls-stan-plugin/src/Ide/Plugin/Stan.hs b/plugins/hls-stan-plugin/src/Ide/Plugin/Stan.hs
index 757768a574..a1efb7f150 100644
--- a/plugins/hls-stan-plugin/src/Ide/Plugin/Stan.hs
+++ b/plugins/hls-stan-plugin/src/Ide/Plugin/Stan.hs
@@ -187,17 +187,18 @@ rules recorder plId = do
                 "Possible solutions:"
               ]
                 ++ map ("  - " <>) (inspectionSolution inspection)
-        return ( file,
-          ShowDiag,
-          LSP.Diagnostic
-            { _range = realSrcSpanToRange observationSrcSpan,
-              _severity = Just LSP.DiagnosticSeverity_Hint,
-              _code = Just (LSP.InR $ unId (inspectionId inspection)),
-              _source = Just "stan",
-              _message = message,
-              _relatedInformation = Nothing,
-              _tags = Nothing,
-              _codeDescription = Nothing,
-              _data_ = Nothing
-            }
-          )
+        return $
+          ideErrorFromLspDiag
+            LSP.Diagnostic
+              { _range = realSrcSpanToRange observationSrcSpan,
+                _severity = Just LSP.DiagnosticSeverity_Hint,
+                _code = Just (LSP.InR $ unId (inspectionId inspection)),
+                _source = Just "stan",
+                _message = message,
+                _relatedInformation = Nothing,
+                _tags = Nothing,
+                _codeDescription = Nothing,
+                _data_ = Nothing
+              }
+            file
+            Nothing
diff --git a/test/functional/Config.hs b/test/functional/Config.hs
index 445683366c..1f91ec4466 100644
--- a/test/functional/Config.hs
+++ b/test/functional/Config.hs
@@ -8,13 +8,12 @@ import           Control.Monad
 import           Data.Hashable
 import qualified Data.HashMap.Strict  as HM
 import qualified Data.Map             as Map
-import qualified Data.Text            as T
 import           Data.Typeable        (Typeable)
 import           Development.IDE      (RuleResult, action, define,
                                        getFilesOfInterestUntracked,
                                        getPluginConfigAction, ideErrorText,
                                        uses_)
-import           Development.IDE.Test (Cursor, expectDiagnostics)
+import           Development.IDE.Test (ExpectedDiagnostic, expectDiagnostics)
 import           GHC.Generics
 import           Ide.Plugin.Config
 import           Ide.Types
@@ -67,8 +66,8 @@ genericConfigTests = testGroup "generic plugin config"
             expectDiagnostics standardDiagnostics
     ]
     where
-        standardDiagnostics = [("Foo.hs", [(DiagnosticSeverity_Warning, (1,0), "Top-level binding")])]
-        testPluginDiagnostics = [("Foo.hs", [(DiagnosticSeverity_Error, (0,0), "testplugin")])]
+        standardDiagnostics = [("Foo.hs", [(DiagnosticSeverity_Warning, (1,0), "Top-level binding", Nothing)])]
+        testPluginDiagnostics = [("Foo.hs", [(DiagnosticSeverity_Error, (0,0), "testplugin", Nothing)])]
 
         runConfigSession subdir session = do
           failIfSessionTimeout $
@@ -110,7 +109,7 @@ type instance RuleResult GetTestDiagnostics = ()
 
 expectDiagnosticsFail
   :: HasCallStack
-  => ExpectBroken 'Ideal [(FilePath, [(DiagnosticSeverity, Cursor, T.Text)])]
-  -> ExpectBroken 'Current [(FilePath, [(DiagnosticSeverity, Cursor, T.Text)])]
+  => ExpectBroken 'Ideal [(FilePath, [ExpectedDiagnostic])]
+  -> ExpectBroken 'Current [(FilePath, [ExpectedDiagnostic])]
   -> Session ()
 expectDiagnosticsFail _ = expectDiagnostics . unCurrent
