diff --git a/haskell-language-server.cabal b/haskell-language-server.cabal
index 95b3c07f..a1cfb25d 100644
--- a/haskell-language-server.cabal
+++ b/haskell-language-server.cabal
@@ -174,7 +174,7 @@ flag cabalgild
   manual:      True
 
 common cabalgild
-  if flag(cabalgild) && impl(ghc < 9.11)
+  if flag(cabalgild) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-cabal-gild-plugin
     cpp-options: -Dhls_cabalgild
 
@@ -186,7 +186,7 @@ flag isolateCabalGildTests
 
 library hls-cabal-gild-plugin
   import:           defaults, pedantic, warnings
-  if !flag(cabalgild) || impl(ghc > 9.11)
+  if !flag(cabalgild) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:  Ide.Plugin.CabalGild
   hs-source-dirs:   plugins/hls-cabal-gild-plugin/src
@@ -203,7 +203,7 @@ library hls-cabal-gild-plugin
 -- The `hls-cabal-plugin` is needed for tests, as we need to install notification handlers
 test-suite hls-cabal-gild-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(cabalgild) || !flag(cabal) || impl(ghc > 9.11)
+  if !flag(cabalgild) || !flag(cabal) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-cabal-gild-plugin/test
@@ -580,13 +580,13 @@ flag rename
   manual:      True
 
 common rename
-  if flag(rename) && impl(ghc < 9.11)
+  if flag(rename) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-rename-plugin
     cpp-options: -Dhls_rename
 
 library hls-rename-plugin
   import:           defaults, pedantic, warnings
-  if !flag(rename) || impl(ghc > 9.11)
+  if !flag(rename) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:  Ide.Plugin.Rename
   hs-source-dirs:   plugins/hls-rename-plugin/src
@@ -610,7 +610,7 @@ library hls-rename-plugin
 
 test-suite hls-rename-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(rename) || impl(ghc > 9.11)
+  if !flag(rename) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-rename-plugin/test
@@ -636,13 +636,13 @@ flag retrie
   manual:      True
 
 common retrie
-  if flag(retrie) && impl(ghc < 9.10)
+  if flag(retrie) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-retrie-plugin
     cpp-options: -Dhls_retrie
 
 library hls-retrie-plugin
   import:           defaults, pedantic, warnings
-  if !(flag(retrie) && impl(ghc < 9.10))
+  if !(flag(retrie) && impl(ghc < 9.13))
     buildable: False
   exposed-modules:  Ide.Plugin.Retrie
   hs-source-dirs:   plugins/hls-retrie-plugin/src
@@ -673,7 +673,7 @@ library hls-retrie-plugin
 
 test-suite hls-retrie-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !(flag(retrie) && impl(ghc < 9.10))
+  if !(flag(retrie) && impl(ghc < 9.13))
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-retrie-plugin/test
@@ -703,14 +703,13 @@ flag hlint
   manual:      True
 
 common hlint
-  if flag(hlint) && impl(ghc < 9.10)
+  if flag(hlint) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-hlint-plugin
     cpp-options: -Dhls_hlint
 
 library hls-hlint-plugin
   import:           defaults, pedantic, warnings
-  -- https://github.com/ndmitchell/hlint/pull/1594
-  if !(flag(hlint)) || impl(ghc > 9.10)
+  if !(flag(hlint) && impl(ghc < 9.13))
     buildable: False
   exposed-modules:  Ide.Plugin.Hlint
   hs-source-dirs:   plugins/hls-hlint-plugin/src
@@ -722,7 +721,7 @@ library hls-hlint-plugin
     , filepath
     , ghcide                == 2.10.0.0
     , hashable
-    , hlint                 >= 3.5 && < 3.9
+    , hlint                 >= 3.5 && < 3.11
     , hls-plugin-api        == 2.10.0.0
     , lens
     , mtl
@@ -753,7 +752,7 @@ library hls-hlint-plugin
 
 test-suite hls-hlint-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if (!flag(hlint)) || impl(ghc > 9.10)
+  if !(flag(hlint) && impl(ghc < 9.13))
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-hlint-plugin/test
@@ -782,13 +781,13 @@ flag stan
   manual:      True
 
 common stan
-  if flag(stan) && impl(ghc < 9.11)
+  if flag(stan) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-stan-plugin
     cpp-options: -Dhls_stan
 
 library hls-stan-plugin
   import:           defaults, pedantic, warnings
-  if !flag(stan) || impl(ghc > 9.11)
+  if !flag(stan) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:    Ide.Plugin.Stan
   hs-source-dirs:     plugins/hls-stan-plugin/src
@@ -813,7 +812,7 @@ library hls-stan-plugin
 
 test-suite hls-stan-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(stan) || impl(ghc > 9.11)
+  if !flag(stan) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-stan-plugin/test
@@ -896,6 +895,7 @@ library hls-pragmas-plugin
   build-depends:
     , aeson
     , extra
+    , aeson
     , fuzzy
     , ghcide                == 2.10.0.0
     , hls-plugin-api        == 2.10.0.0
@@ -932,13 +932,13 @@ flag splice
   manual:      True
 
 common splice
-  if flag(splice) && impl(ghc < 9.10)
+  if flag(splice) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-splice-plugin
     cpp-options: -Dhls_splice
 
 library hls-splice-plugin
   import:           defaults, pedantic, warnings
-  if !(flag(splice) && impl(ghc < 9.10))
+  if !(flag(splice) && impl(ghc < 9.13))
     buildable: False
   exposed-modules:
     Ide.Plugin.Splice
@@ -966,7 +966,7 @@ library hls-splice-plugin
 
 test-suite hls-splice-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !(flag(splice) && impl(ghc < 9.10))
+  if !(flag(splice) && impl(ghc < 9.13))
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-splice-plugin/test
@@ -1208,13 +1208,13 @@ flag gadt
   manual:      True
 
 common gadt
-  if flag(gadt) && impl(ghc < 9.11)
+  if flag(gadt) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-gadt-plugin
     cpp-options: -Dhls_gadt
 
 library hls-gadt-plugin
   import:           defaults, pedantic, warnings
-  if !flag(gadt) || impl(ghc > 9.11)
+  if !flag(gadt) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:  Ide.Plugin.GADT
   other-modules:    Ide.Plugin.GHC
@@ -1238,7 +1238,7 @@ library hls-gadt-plugin
 
 test-suite hls-gadt-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(gadt) || impl(ghc > 9.11)
+  if !flag(gadt) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-gadt-plugin/test
@@ -1400,14 +1400,13 @@ flag floskell
   manual:      True
 
 common floskell
-  if flag(floskell) && impl(ghc < 9.10)
+  if flag(floskell) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-floskell-plugin
     cpp-options: -Dhls_floskell
 
 library hls-floskell-plugin
   import:           defaults, pedantic, warnings
-  -- https://github.com/ennocramer/floskell/pull/82
-  if !(flag(floskell) && impl(ghc < 9.10))
+  if !(flag(floskell) && impl(ghc < 9.13))
     buildable: False
   exposed-modules:  Ide.Plugin.Floskell
   hs-source-dirs:   plugins/hls-floskell-plugin/src
@@ -1422,7 +1421,7 @@ library hls-floskell-plugin
 
 test-suite hls-floskell-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !(flag(floskell) && impl(ghc < 9.10))
+  if !(flag(floskell) && impl(ghc < 9.13))
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-floskell-plugin/test
@@ -1442,13 +1441,13 @@ flag fourmolu
   manual:      True
 
 common fourmolu
-  if flag(fourmolu) && impl(ghc < 9.11)
+  if flag(fourmolu) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-fourmolu-plugin
     cpp-options: -Dhls_fourmolu
 
 library hls-fourmolu-plugin
   import:           defaults, pedantic, warnings
-  if !flag(fourmolu) || impl(ghc > 9.11)
+  if !flag(fourmolu) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:  Ide.Plugin.Fourmolu
   hs-source-dirs:   plugins/hls-fourmolu-plugin/src
@@ -1468,7 +1467,7 @@ library hls-fourmolu-plugin
 
 test-suite hls-fourmolu-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(fourmolu) || impl(ghc > 9.11)
+  if !flag(fourmolu) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-fourmolu-plugin/test
@@ -1496,13 +1495,13 @@ flag ormolu
   manual:      True
 
 common ormolu
-  if flag(ormolu) && impl(ghc < 9.11)
+  if flag(ormolu) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-ormolu-plugin
     cpp-options: -Dhls_ormolu
 
 library hls-ormolu-plugin
   import:           defaults, pedantic, warnings
-  if !flag(ormolu) || impl(ghc > 9.11)
+  if !flag(ormolu) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:  Ide.Plugin.Ormolu
   hs-source-dirs:   plugins/hls-ormolu-plugin/src
@@ -1515,14 +1514,14 @@ library hls-ormolu-plugin
     , lsp
     , mtl
     , process-extras  >= 0.7.1
-    , ormolu          ^>=0.1.2 || ^>= 0.2 || ^>= 0.3 || ^>= 0.5 || ^>= 0.6 || ^>= 0.7
+    , ormolu
     , text
     , transformers
 
 
 test-suite hls-ormolu-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(ormolu) || impl(ghc > 9.11)
+  if !flag(ormolu) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-ormolu-plugin/test
@@ -1551,14 +1550,13 @@ flag stylishHaskell
   manual:      True
 
 common stylishHaskell
-  if flag(stylishHaskell) && impl(ghc < 9.10)
+  if flag(stylishHaskell) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-stylish-haskell-plugin
     cpp-options: -Dhls_stylishHaskell
 
 library hls-stylish-haskell-plugin
   import:           defaults, pedantic, warnings
-  -- https://github.com/haskell/stylish-haskell/issues/479
-  if !(flag(stylishHaskell) && impl(ghc < 9.10))
+  if !(flag(stylishHaskell) && impl(ghc < 9.13))
     buildable: False
   exposed-modules:  Ide.Plugin.StylishHaskell
   hs-source-dirs:   plugins/hls-stylish-haskell-plugin/src
@@ -1576,7 +1574,7 @@ library hls-stylish-haskell-plugin
 
 test-suite hls-stylish-haskell-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !(flag(stylishHaskell) && impl(ghc < 9.10))
+  if !(flag(stylishHaskell) && impl(ghc < 9.13))
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-stylish-haskell-plugin/test
@@ -1596,13 +1594,13 @@ flag refactor
   manual:      True
 
 common refactor
-  if flag(refactor) && impl(ghc < 9.11)
+  if flag(refactor) && impl(ghc < 9.13)
     build-depends: haskell-language-server:hls-refactor-plugin
     cpp-options: -Dhls_refactor
 
 library hls-refactor-plugin
   import:           defaults, pedantic, warnings
-  if !flag(refactor) || impl(ghc > 9.11)
+  if !flag(refactor) || impl(ghc > 9.13)
     buildable: False
   exposed-modules:  Development.IDE.GHC.ExactPrint
                     Development.IDE.GHC.Compat.ExactPrint
@@ -1635,6 +1633,7 @@ library hls-refactor-plugin
     , ghc
     , bytestring
     , ghc-boot
+    , hashable
     , regex-tdfa
     , ghcide                == 2.10.0.0
     , hls-plugin-api        == 2.10.0.0
@@ -1661,7 +1660,7 @@ library hls-refactor-plugin
 
 test-suite hls-refactor-plugin-tests
   import:           defaults, pedantic, test-defaults, warnings
-  if !flag(refactor) || impl(ghc > 9.11)
+  if !flag(refactor) || impl(ghc > 9.13)
     buildable: False
   type:             exitcode-stdio-1.0
   hs-source-dirs:   plugins/hls-refactor-plugin/test
diff --git a/plugins/hls-gadt-plugin/src/Ide/Plugin/GHC.hs b/plugins/hls-gadt-plugin/src/Ide/Plugin/GHC.hs
index a85a4497..eeb13c74 100644
--- a/plugins/hls-gadt-plugin/src/Ide/Plugin/GHC.hs
+++ b/plugins/hls-gadt-plugin/src/Ide/Plugin/GHC.hs
@@ -13,8 +13,7 @@ import qualified Data.Text                               as T
 import           Development.IDE
 import           Development.IDE.GHC.Compat
 import           Development.IDE.GHC.Compat.ExactPrint
-import           GHC.Parser.Annotation                   (AddEpAnn (..),
-                                                          DeltaPos (..),
+import           GHC.Parser.Annotation                   (DeltaPos (..),
                                                           EpAnn (..),
                                                           EpAnnComments (EpaComments))
 import           Ide.PluginUtils                         (subRange)
@@ -22,6 +21,12 @@ import           Language.Haskell.GHC.ExactPrint.Parsers (parseDecl)
 
 -- See Note [Guidelines For Using CPP In GHCIDE Import Statements]
 
+#if MIN_VERSION_ghc(9,11,0)
+import           GHC.Parser.Annotation                   (EpToken (..))
+#else
+import           GHC.Parser.Annotation                   (AddEpAnn (..))
+#endif
+
 #if MIN_VERSION_ghc(9,5,0)
 import qualified Data.List.NonEmpty                      as NE
 #endif
@@ -97,7 +102,9 @@ h98ToGADTConDecl ::
 h98ToGADTConDecl dataName tyVars ctxt = \case
     ConDeclH98{..} ->
         ConDeclGADT
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+            (AnnConDeclGADT [NoEpTok] [NoEpTok] NoEpUniTok)
+#elif MIN_VERSION_ghc(9,9,0)
             (NoEpUniTok, con_ext)
 #else
             con_ext
@@ -207,10 +214,17 @@ prettyGADTDecl df decl =
                 Left err -> Left $ printWithoutUniques err
 
         adjustDataDecl DataDecl{..} = DataDecl
+#if MIN_VERSION_ghc(9,11,0)
+            { tcdDataDefn = tcdDataDefn
+#else
             { tcdDExt = adjustWhere tcdDExt
             , tcdDataDefn = tcdDataDefn
+#endif
                 { dd_cons =
                       fmap adjustCon (dd_cons tcdDataDefn)
+#if MIN_VERSION_ghc(9,11,0)
+                , dd_ext = adjustWhere (dd_ext tcdDataDefn)
+#endif
                 }
             , ..
             }
@@ -218,7 +232,11 @@ prettyGADTDecl df decl =
 
         -- Make every data constructor start with a new line and 2 spaces
         adjustCon :: LConDecl GP -> LConDecl GP
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+        adjustCon (L (EpAnn (EpaSpan loc) _ _) r) =
+            let delta = EpaDelta loc (DifferentLine 1 3) []
+            in L (EpAnn delta (AnnListItem []) (EpaComments [])) r
+#elif MIN_VERSION_ghc(9,9,0)
         adjustCon (L _ r) =
             let delta = EpaDelta (DifferentLine 1 3) []
             in L (EpAnn delta (AnnListItem []) (EpaComments [])) r
@@ -228,6 +246,12 @@ prettyGADTDecl df decl =
             in L (SrcSpanAnn (EpAnn (go (spanAsAnchor loc)) (AnnListItem []) (EpaComments [])) loc) r
 #endif
 
+#if MIN_VERSION_ghc(9,11,0)
+        adjustWhere :: XCHsDataDefn GP -> XCHsDataDefn GP
+        adjustWhere AnnDataDefn{..}= AnnDataDefn{
+            andd_where = EpTok d1,
+            ..}
+#else
         -- Adjust where annotation to the same line of the type constructor
         adjustWhere tcdDExt = tcdDExt <&>
 #if !MIN_VERSION_ghc(9,9,0)
@@ -238,6 +262,7 @@ prettyGADTDecl df decl =
                 then AddEpAnn AnnWhere d1
                 else AddEpAnn ann l
             )
+#endif
 
         -- Remove the first extra line if exist
         removeExtraEmptyLine s = case stripInfix "\n\n" s of
@@ -257,6 +282,10 @@ noUsed = EpAnnNotUsed
 #endif
 
 pattern UserTyVar' :: LIdP pass -> HsTyVarBndr flag pass
+#if MIN_VERSION_ghc(9,11,0)
+pattern UserTyVar' s <- HsTvb _ _ (HsBndrVar _ s) _
+#else
 pattern UserTyVar' s <- UserTyVar _ _ s
+#endif
 
 implicitTyVars = wrapXRec @GP mkHsOuterImplicit
diff --git a/plugins/hls-refactor-plugin/src/Development/IDE/GHC/ExactPrint.hs b/plugins/hls-refactor-plugin/src/Development/IDE/GHC/ExactPrint.hs
index e3c9aae8..1f7ecb8e 100644
--- a/plugins/hls-refactor-plugin/src/Development/IDE/GHC/ExactPrint.hs
+++ b/plugins/hls-refactor-plugin/src/Development/IDE/GHC/ExactPrint.hs
@@ -1,6 +1,7 @@
 {-# LANGUAGE GADTs        #-}
 {-# LANGUAGE TypeFamilies #-}
 {-# OPTIONS_GHC -Wno-orphans #-}
+{-# LANGUAGE CPP            #-}
 
 -- | This module hosts various abstractions and utility functions to work with ghc-exactprint.
 module Development.IDE.GHC.ExactPrint
@@ -31,6 +32,9 @@ module Development.IDE.GHC.ExactPrint
       -- * Helper function
       eqSrcSpan,
       epl,
+#if MIN_VERSION_ghc(9,11,0)
+      epTok,
+#endif
       epAnn,
       removeTrailingComma,
       annotateParsedSource,
@@ -85,6 +89,7 @@ import           Control.Lens.Operators                  ((%~))
 import           Data.List                               (partition)
 import           GHC                                     (DeltaPos (..),
                                                           SrcSpanAnnN)
+import           GHC.Types.SrcLoc                        (generatedSrcSpan)
 
 -- See Note [Guidelines For Using CPP In GHCIDE Import Statements]
 
@@ -125,6 +130,10 @@ import           GHC                                     (
                                                           spanAsAnchor)
 #endif
 
+#if MIN_VERSION_ghc(9,11,0)
+import           GHC                                     (EpToken (..))
+#endif
+
 setPrecedingLines ::
 #if !MIN_VERSION_ghc(9,9,0)
      Default t =>
@@ -466,7 +475,10 @@ modifySmallestDeclWithM validSpan f a = do
             False -> first (DL.singleton ldecl <>) <$> modifyMatchingDecl rest
   modifyDeclsT' (fmap (first DL.toList) . modifyMatchingDecl) a
 
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+generatedAnchor :: DeltaPos -> EpaLocation
+generatedAnchor dp = EpaDelta generatedSrcSpan dp []
+#elif MIN_VERSION_ghc(9,9,0)
 generatedAnchor :: DeltaPos -> Anchor
 generatedAnchor dp = EpaDelta dp []
 #else
@@ -474,7 +486,7 @@ generatedAnchor :: AnchorOperation -> Anchor
 generatedAnchor anchorOp = GHC.Anchor (GHC.realSrcSpan generatedSrcSpan) anchorOp
 #endif
 
-setAnchor :: Anchor -> SrcSpanAnnN -> SrcSpanAnnN
+setAnchor :: EpaLocation -> SrcSpanAnnN -> SrcSpanAnnN
 #if MIN_VERSION_ghc(9,9,0)
 setAnchor anc (EpAnn _ nameAnn comments) =
   EpAnn anc nameAnn comments
@@ -563,10 +575,10 @@ modifySigWithM queryId f a = do
       modifyMatchingSigD (ldecl : rest) = (DL.singleton ldecl <>) <$> modifyMatchingSigD rest
   modifyDeclsT (fmap DL.toList . modifyMatchingSigD) $ makeDeltaAst a
 
-genAnchor0 :: Anchor
+genAnchor0 :: EpaLocation
 genAnchor0 = generatedAnchor m0
 
-genAnchor1 :: Anchor
+genAnchor1 :: EpaLocation
 genAnchor1 = generatedAnchor m1
 
 #if MIN_VERSION_ghc(9,9,0)
@@ -763,6 +775,17 @@ parenthesize = parenthesizeHsExpr appPrec
 eqSrcSpan :: SrcSpan -> SrcSpan -> Bool
 eqSrcSpan l r = leftmost_smallest l r == EQ
 
+#if MIN_VERSION_ghc(9,11,0)
+addParensToCtxt :: Maybe (EpToken ")") -> AnnContext -> AnnContext
+addParensToCtxt close_dp = addOpen . addClose
+  where
+      addOpen it@AnnContext{ac_open = []} = it{ac_open = [epTok 0]}
+      addOpen other                       = other
+      addClose it
+        | Just c <- close_dp = it{ac_close = [c]}
+        | AnnContext{ac_close = []} <- it = it{ac_close = [epTok 0]}
+        | otherwise = it
+#else
 addParensToCtxt :: Maybe EpaLocation -> AnnContext -> AnnContext
 addParensToCtxt close_dp = addOpen . addClose
   where
@@ -772,9 +795,18 @@ addParensToCtxt close_dp = addOpen . addClose
         | Just c <- close_dp = it{ac_close = [c]}
         | AnnContext{ac_close = []} <- it = it{ac_close = [epl 0]}
         | otherwise = it
+#endif
 
+#if MIN_VERSION_ghc(9,11,0)
+epl :: Int -> EpaLocation
+epl n = EpaDelta noSrcSpan (SameLine n) []
+
+epTok :: Int -> EpToken a
+epTok n = EpTok $ epl n
+#else
 epl :: Int -> EpaLocation
 epl n = EpaDelta (SameLine n) []
+#endif
 
 epAnn :: SrcSpan -> ann -> EpAnn ann
 epAnn srcSpan anns = EpAnn (spanAsAnchor srcSpan) anns emptyComments
@@ -802,6 +834,18 @@ removeComma (SrcSpanAnn (EpAnn anc (AnnListItem as) cs) l)
       isCommaAnn _             = False
 #endif
 
+#if MIN_VERSION_ghc(9,11,0)
+addParens :: Bool -> GHC.NameAnn -> GHC.NameAnn
+addParens True it@NameAnn{} =
+        it{nann_adornment = NameParens (epTok 0) (epTok 0) }
+addParens True it@NameAnnCommas{} =
+        it{nann_adornment = NameParens (epTok 0) (epTok 0) }
+addParens True it@NameAnnOnly{} =
+        it{nann_adornment = NameParens (epTok 0) (epTok 0) }
+addParens True NameAnnTrailing{..} =
+        NameAnn{nann_adornment = NameParens (epTok 0) (epTok 0), nann_name = epl 0, ..}
+addParens _ it = it
+#else
 addParens :: Bool -> GHC.NameAnn -> GHC.NameAnn
 addParens True it@NameAnn{} =
         it{nann_adornment = NameParens, nann_open = epl 0, nann_close = epl 0 }
@@ -812,6 +856,7 @@ addParens True it@NameAnnOnly{} =
 addParens True NameAnnTrailing{..} =
         NameAnn{nann_adornment = NameParens, nann_open = epl 0, nann_close = epl 0, nann_name = epl 0, ..}
 addParens _ it = it
+#endif
 
 removeTrailingComma :: GenLocated SrcSpanAnnA ast -> GenLocated SrcSpanAnnA ast
 removeTrailingComma = flip modifyAnns $ \(AnnListItem l) -> AnnListItem $ filter (not . isCommaAnn) l
diff --git a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs
index 3252d6b3..8af4c259 100644
--- a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs
+++ b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction.hs
@@ -69,8 +69,7 @@ import           Development.IDE.Types.Diagnostics
 import           Development.IDE.Types.Exports
 import           Development.IDE.Types.Location
 import           Development.IDE.Types.Options
-import           GHC                                               (AddEpAnn (AddEpAnn),
-                                                                    AnnsModule (am_main),
+import           GHC                                               (AnnsModule (..),
                                                                     DeltaPos (..),
                                                                     EpAnn (..),
                                                                     LEpaComment)
@@ -103,6 +102,12 @@ import           Text.Regex.TDFA                                   ((=~), (=~~))
 
 -- See Note [Guidelines For Using CPP In GHCIDE Import Statements]
 
+#if MIN_VERSION_ghc(9,11,0)
+import           GHC                                               (EpToken (..))
+#else
+import           GHC                                               (AddEpAnn (AddEpAnn))
+#endif
+
 #if !MIN_VERSION_ghc(9,9,0)
 import           Development.IDE.GHC.Compat.ExactPrint             (makeDeltaAst)
 import           GHC                                               (Anchor (anchor_op),
@@ -339,7 +344,11 @@ findSigOfBinds range = go
         case unLoc <$> findDeclContainingLoc (_start range) lsigs of
           Just sig' -> Just sig'
           Nothing -> do
+#if MIN_VERSION_ghc(9,11,0)
+            lHsBindLR <- findDeclContainingLoc (_start range) binds
+#else
             lHsBindLR <- findDeclContainingLoc (_start range) (bagToList binds)
+#endif
             findSigOfBind range (unLoc lHsBindLR)
     go _ = Nothing
 
@@ -420,7 +429,11 @@ isUnusedImportedId
   modName
   importSpan
     | occ <- mkVarOcc identifier,
+#if MIN_VERSION_ghc(9,11,0)
+      impModsVals <- importedByUser . concat $ moduleEnvElts (mkModuleEnv $ M.toList imp_mods),
+#else
       impModsVals <- importedByUser . concat $ moduleEnvElts imp_mods,
+#endif
       Just rdrEnv <-
         listToMaybe
           [ imv_all_exports
@@ -658,12 +671,12 @@ suggestDeleteUnusedBinding
         indexedContent
         name
         (L _ Match{m_grhss=GRHSs{grhssLocalBinds}}) = do
-        let go bag lsigs =
-                if isEmptyBag bag
+        let go binds lsigs =
+                if null binds
                 then []
-                else concatMap (findRelatedSpanForHsBind indexedContent name lsigs) bag
+                else concatMap (findRelatedSpanForHsBind indexedContent name lsigs) binds
         case grhssLocalBinds of
-          (HsValBinds _ (ValBinds _ bag lsigs)) -> go bag lsigs
+          (HsValBinds _ (ValBinds _ binds lsigs)) -> go binds lsigs
           _                                     -> []
 
       findRelatedSpanForHsBind
@@ -1699,15 +1712,23 @@ findPositionAfterModuleName ps _hsmodName' = do
     whereKeywordLineOffset = case hsmodAnn of
 #endif
         EpAnn _ annsModule _ -> do
+#if MIN_VERSION_ghc(9,11,0)
+            case am_where annsModule of
+                NoEpTok -> Nothing
+                EpTok loc -> epaLocationToLine loc
+#else
             -- Find the first 'where'
             whereLocation <- listToMaybe . mapMaybe filterWhere $ am_main annsModule
             epaLocationToLine whereLocation
+#endif
 #if !MIN_VERSION_ghc(9,9,0)
         EpAnnNotUsed -> Nothing
 #endif
+
+#if !MIN_VERSION_ghc(9,11,0)
     filterWhere (AddEpAnn AnnWhere loc) = Just loc
     filterWhere _                       = Nothing
-
+#endif
     epaLocationToLine :: EpaLocation -> Maybe Int
 #if MIN_VERSION_ghc(9,9,0)
     epaLocationToLine (EpaSpan sp)
@@ -1719,11 +1740,12 @@ findPositionAfterModuleName ps _hsmodName' = do
     epaLocationToLine (EpaSpan sp)
       = Just . srcLocLine . realSrcSpanEnd $ sp
 #endif
-    epaLocationToLine (EpaDelta (SameLine _) priorComments) = Just $ sumCommentsOffset priorComments
+
+    epaLocationToLine (EpaDelta' (SameLine _) priorComments) = Just $ sumCommentsOffset priorComments
     -- 'priorComments' contains the comments right before the current EpaLocation
     -- Summing line offset of priorComments is necessary, as 'line' is the gap between the last comment and
     -- the current AST node
-    epaLocationToLine (EpaDelta (DifferentLine line _) priorComments) = Just (line + sumCommentsOffset priorComments)
+    epaLocationToLine (EpaDelta' (DifferentLine line _) priorComments) = Just (line + sumCommentsOffset priorComments)
 
     sumCommentsOffset :: [LEpaComment] -> Int
 #if MIN_VERSION_ghc(9,9,0)
@@ -1735,8 +1757,8 @@ findPositionAfterModuleName ps _hsmodName' = do
 #if MIN_VERSION_ghc(9,9,0)
     anchorOpLine :: EpaLocation' a -> Int
     anchorOpLine EpaSpan{}                           = 0
-    anchorOpLine (EpaDelta (SameLine _) _)           = 0
-    anchorOpLine (EpaDelta (DifferentLine line _) _) = line
+    anchorOpLine (EpaDelta' (SameLine _) _)           = 0
+    anchorOpLine (EpaDelta' (DifferentLine line _) _) = line
 #else
     anchorOpLine :: AnchorOperation -> Int
     anchorOpLine UnchangedAnchor                      = 0
@@ -1744,6 +1766,14 @@ findPositionAfterModuleName ps _hsmodName' = do
     anchorOpLine (MovedAnchor (DifferentLine line _)) = line
 #endif
 
+{-# COMPLETE EpaDelta' #-}
+pattern EpaDelta' :: DeltaPos -> a -> EpaLocation' a
+#if MIN_VERSION_ghc(9,11,0)
+pattern EpaDelta' n at <- EpaDelta _ n at
+#else
+pattern EpaDelta' n at <- EpaDelta n at
+#endif
+
 findPositionFromImports :: HasSrcSpan a => t -> (t -> a) -> Maybe ((Int, Int), Int)
 findPositionFromImports hsField f = case getLoc (f hsField) of
   RealSrcSpan s _ ->
diff --git a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs
index 7326e2d7..5062a2eb 100644
--- a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs
+++ b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs
@@ -1,5 +1,7 @@
 {-# LANGUAGE GADTs        #-}
 {-# LANGUAGE TypeFamilies #-}
+{-# LANGUAGE CPP                      #-}
+
 module Development.IDE.Plugin.CodeAction.ExactPrint (
   Rewrite (..),
   rewriteToEdit,
@@ -32,13 +34,12 @@ import           Language.Haskell.GHC.ExactPrint
 import           Language.LSP.Protocol.Types
 
 import           Control.Lens                           (_head, _last, over)
-import           Data.Bifunctor                         (first)
+import           Data.Bifunctor                         (first, second)
 import           Data.Maybe                             (fromMaybe, mapMaybe)
 import           Development.IDE.Plugin.CodeAction.Util
-import           GHC                                    (AddEpAnn (..),
+import           GHC                                    (
                                                          AnnContext (..),
                                                          AnnList (..),
-                                                         AnnParen (..),
                                                          DeltaPos (SameLine),
                                                          EpAnn (..),
                                                          IsUnicodeSyntax (NormalSyntax),
@@ -48,6 +49,15 @@ import           GHC                                    (AddEpAnn (..),
 
 -- See Note [Guidelines For Using CPP In GHCIDE Import Statements]
 
+#if MIN_VERSION_ghc(9,11,0)
+import           GHC                                    (EpUniToken(..),
+                                                         EpToken (..),
+                                                         NoEpAnns,
+                                                         AnnListBrackets (..))
+#else
+import           GHC                                    (AddEpAnn (..))
+#endif
+
 #if !MIN_VERSION_ghc(9,9,0)
 import           Data.Default                           (Default (..))
 import           GHC                                    (addAnns, ann)
@@ -179,7 +189,9 @@ appendConstraint constraintT = go . traceAst "appendConstraint"
     -- For singleton constraints, the close Paren DP is attached to an HsPar wrapping the constraint
     -- we have to reposition it manually into the AnnContext
         close_dp = case ctxt of
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+            [L _ (HsParTy (_, c) _)] -> Just c
+#elif MIN_VERSION_ghc(9,9,0)
             [L _ (HsParTy AnnParen{ap_close} _)] -> Just ap_close
 #else
             [L _ (HsParTy EpAnn{anns=AnnParen{ap_close}} _)] -> Just ap_close
@@ -203,7 +215,11 @@ appendConstraint constraintT = go . traceAst "appendConstraint"
 #else
     let context = Just $ reAnnL annCtxt emptyComments $ L lContext [resetEntryDP constraint]
 #endif
+#if MIN_VERSION_ghc(9,11,0)
+        annCtxt = AnnContext (Just (EpUniTok (epl 1) NormalSyntax )) [epTok 0 | needsParens] [epTok 0 | needsParens]
+#else
         annCtxt = AnnContext (Just (NormalSyntax, epl 1)) [epl 0 | needsParens] [epl 0 | needsParens]
+#endif
         needsParens = hsTypeNeedsParens sigPrec $ unLoc constraint
     ast <- pure $ setEntryDP (makeDeltaAst ast) (SameLine 1)
 
@@ -346,7 +362,9 @@ extendImportViaParent df parent child (L l it@ImportDecl{..})
 #endif
                                              childRdr
           x :: LIE GhcPs = L ll' $ IEThingWith
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+                                     (Nothing, (EpTok d1, NoEpTok, NoEpTok, EpTok noAnn))
+#elif MIN_VERSION_ghc(9,9,0)
                                      (Nothing, [AddEpAnn AnnOpenP d1, AddEpAnn AnnCloseP noAnn])
 #elif MIN_VERSION_ghc(9,7,0)
                                      (Nothing, addAnns mempty [AddEpAnn AnnOpenP d1, AddEpAnn AnnCloseP def] emptyComments)
@@ -382,7 +400,9 @@ extendImportViaParent df parent child (L l it@ImportDecl{..})
 #if MIN_VERSION_ghc(9,9,0)
                                 docs
 #endif
-#if MIN_VERSION_ghc(9,7,0) && !MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+            newl = second (\(op, _, _, cl) -> (op, EpTok d0, NoEpTok, cl)) l'''
+#elif MIN_VERSION_ghc(9,7,0) && !MIN_VERSION_ghc(9,9,0)
             newl = fmap (\ann -> ann ++ [AddEpAnn AnnDotdot d0]) <$> l'''
 #else
             newl = (\ann -> ann ++ [AddEpAnn AnnDotdot d0]) <$> l'''
@@ -427,21 +447,31 @@ extendImportViaParent df parent child (L l it@ImportDecl{..})
       parentRdr <- liftParseAST df parent
       let childRdr = reLocA $ L srcChild $ mkRdrUnqual $ mkVarOcc child
           isParentOperator = hasParen parent
+#if MIN_VERSION_ghc(9,11,0)
+      let parentLIE = reLocA $ L srcParent $ if isParentOperator then IEType (epTok 0) parentRdr'
+#else
       let parentLIE = reLocA $ L srcParent $ if isParentOperator then IEType (epl 0) parentRdr'
+#endif
                                                else IEName
 #if MIN_VERSION_ghc(9,5,0)
                                                       noExtField
 #endif
                                                       parentRdr'
           parentRdr' = modifyAnns parentRdr $ \case
-              it@NameAnn{nann_adornment = NameParens} -> it{nann_open = epl 1, nann_close = epl 0}
+#if MIN_VERSION_ghc(9,11,0)
+              it@NameAnn{nann_adornment = NameParens _ _} -> it{nann_adornment = NameParens (epTok 1) (epTok 0)}
+#else
+              it@NameAnn{nann_adornment = NameParens _ _} -> it{nann_open = epl 1, nann_close = epl 0}
+#endif
               other -> other
           childLIE = reLocA $ L srcChild $ IEName
 #if MIN_VERSION_ghc(9,5,0)
                                              noExtField
 #endif
                                              childRdr
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+          listAnn = (Nothing, (epTok 1, NoEpTok, NoEpTok, epTok 0))
+#elif MIN_VERSION_ghc(9,9,0)
           listAnn = (Nothing, [AddEpAnn AnnOpenP (epl 1), AddEpAnn AnnCloseP (epl 0)])
 #elif MIN_VERSION_ghc(9,7,0)
           listAnn = (Nothing, epAnn srcParent [AddEpAnn AnnOpenP (epl 1), AddEpAnn AnnCloseP (epl 0)])
@@ -538,7 +568,10 @@ extendHiding ::
 extendHiding symbol (L l idecls) mlies df = do
   L l' lies <- case mlies of
     Nothing -> do
-#if MIN_VERSION_ghc(9,9,0)
+#if MIN_VERSION_ghc(9,11,0)
+        let ann :: EpAnn (AnnList NoEpAnns)
+            ann = noAnnSrcSpanDP0
+#elif MIN_VERSION_ghc(9,9,0)
         let ann = noAnnSrcSpanDP0
 #else
         src <- uniqueSrcSpanT
@@ -549,9 +582,14 @@ extendHiding symbol (L l idecls) mlies df = do
 #else
             ann' = flip (fmap.fmap) ann $ \x -> x
 #endif
+#if MIN_VERSION_ghc(9,11,0)
+                {al_rest = (epTok 1, [])
+                ,al_brackets = ListParens (epTok 1) (epTok 0)
+#else
                 {al_rest = [AddEpAnn AnnHiding (epl 1)]
                 ,al_open = Just $ AddEpAnn AnnOpenP (epl 1)
                 ,al_close = Just $ AddEpAnn AnnCloseP (epl 0)
+#endif
                 }
         return $ L ann' []
     Just pr -> pure pr
diff --git a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/Plugins/AddArgument.hs b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/Plugins/AddArgument.hs
index a7407b67..6b9df0eb 100644
--- a/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/Plugins/AddArgument.hs
+++ b/plugins/hls-refactor-plugin/src/Development/IDE/Plugin/Plugins/AddArgument.hs
@@ -47,6 +47,7 @@ import           GHC.Types.SrcLoc                          (generatedSrcSpan)
 #if MIN_VERSION_ghc(9,9,0)
 import           GHC                                       (DeltaPos (..),
                                                             EpUniToken (..),
+                                                            EpToken(..),
                                                             IsUnicodeSyntax (NormalSyntax))
 import           Language.Haskell.GHC.ExactPrint           (d1, setEntryDP)
 #endif
@@ -81,15 +82,23 @@ addArgToMatch name (L locMatch (Match xMatch ctxMatch pats rhs)) =
   let unqualName = mkRdrUnqual $ mkVarOcc $ T.unpack name
 #if MIN_VERSION_ghc(9,9,0)
       newPat = L noAnnSrcSpanDP1 $ VarPat NoExtField $ L noAnn unqualName
+#else
+      newPat = L (noAnnSrcSpanDP1 generatedSrcSpan) $ VarPat NoExtField (noLocA unqualName)
+#endif
+#if MIN_VERSION_ghc(9,11,0)
+      newPats = (<> [newPat]) <$> pats
+#else
+      newPats = pats <> [newPat]
+#endif
+#if MIN_VERSION_ghc(9,9,0)
       -- The intention is to move `= ...` (right-hand side with equals) to the right so there's 1 space between
       -- the newly added pattern and the rest
       indentRhs :: GRHSs GhcPs (LocatedA (HsExpr GhcPs)) -> GRHSs GhcPs (LocatedA (HsExpr GhcPs))
       indentRhs rhs@GRHSs{grhssGRHSs} = rhs {grhssGRHSs = fmap (`setEntryDP` (SameLine 1)) grhssGRHSs }
 #else
-      newPat = L (noAnnSrcSpanDP1 generatedSrcSpan) $ VarPat NoExtField (noLocA unqualName)
       indentRhs = id
 #endif
-  in (L locMatch (Match xMatch ctxMatch (pats <> [newPat]) (indentRhs rhs)), Prelude.length pats)
+  in (L locMatch (Match xMatch ctxMatch newPats (indentRhs rhs)), Prelude.length pats)
 
 -- Attempt to insert a binding pattern into each match for the given LHsDecl; succeeds only if the function is a FunBind.
 -- Also return:
@@ -171,7 +180,11 @@ addTyHoleToTySigArg loc (L annHsSig (HsSig xHsSig tyVarBndrs lsigTy)) =
           ( noAnn
           , noExtField
           , HsUnrestrictedArrow (EpUniTok d1 NormalSyntax)
+#if MIN_VERSION_ghc(9,11,0)
+          , L wildCardAnn $ HsWildCardTy NoEpTok
+#else
           , L wildCardAnn $ HsWildCardTy noExtField
+#endif
           )
 #elif MIN_VERSION_ghc(9,4,0)
         wildCardAnn = SrcSpanAnn (EpAnn genAnchor1 (AnnListItem []) emptyComments) generatedSrcSpan
