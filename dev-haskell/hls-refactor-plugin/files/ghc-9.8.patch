diff --color -ur a/hls-refactor-plugin.cabal b/hls-refactor-plugin.cabal
--- a/hls-refactor-plugin.cabal	2024-01-09 18:08:41.241972172 +0100
+++ b/hls-refactor-plugin.cabal	2024-01-09 18:08:31.934875530 +0100
@@ -23,10 +23,6 @@
 
 library
   -- Plugins that need exactprint have not been updated for 9.8 yet
-  if impl(ghc >= 9.8)
-    buildable: False
-  else
-    buildable: True
   exposed-modules:  Development.IDE.GHC.ExactPrint
                     Development.IDE.GHC.Compat.ExactPrint
                     Development.IDE.Plugin.CodeAction
Only in b: setup
diff --color -ur a/src/Development/IDE/GHC/Dump.hs b/src/Development/IDE/GHC/Dump.hs
--- a/src/Development/IDE/GHC/Dump.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Development/IDE/GHC/Dump.hs	2024-01-09 18:08:31.944875634 +0100
@@ -123,7 +123,7 @@
 
             sourceText :: SourceText -> SDoc
             sourceText NoSourceText     = text "NoSourceText"
-            sourceText (SourceText src) = text "SourceText" <+> text src
+            sourceText (SourceText src) = text "SourceText" <+> text (unpackFS src)
 
             epaAnchor :: EpaLocation -> SDoc
 #if MIN_VERSION_ghc(9,5,0)
diff --color -ur a/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs b/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs
--- a/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Development/IDE/Plugin/CodeAction/ExactPrint.hs	2024-01-09 18:08:31.943875624 +0100
@@ -253,7 +253,7 @@
                                 noExtField
 #endif
                                 rdr
-        x = reLocA $ L top $ IEVar noExtField lie
+        x = reLocA $ L top $ IEVar Nothing lie
 
     if x `elem` lies
       then TransformT $ lift (Left $ thing <> " already imported")
@@ -311,7 +311,8 @@
                                              noExtField
 #endif
                                              childRdr
-          x :: LIE GhcPs = L ll' $ IEThingWith (addAnns mempty [AddEpAnn AnnOpenP (EpaDelta (SameLine 1) []), AddEpAnn AnnCloseP def] emptyComments) absIE NoIEWildcard [childLIE]
+          x :: LIE GhcPs = L ll' $ IEThingWith (Nothing, anns) absIE NoIEWildcard [childLIE]
+          anns = addAnns mempty [AddEpAnn AnnOpenP (EpaDelta (SameLine 1) []), AddEpAnn AnnCloseP def] emptyComments
 
 #if MIN_VERSION_ghc(9,5,0)
       return $ L l it{ideclImportList = Just (hide, L l' $ reverse pre ++ [x] ++ xs)}
@@ -319,7 +320,7 @@
       return $ L l it{ideclHiding = Just (hide, L l' $ reverse pre ++ [x] ++ xs)}
 #endif
 
-  go hide l' pre ((L l'' (IEThingWith l''' twIE@(L _ ie) _ lies')) : xs)
+  go hide l' pre ((L l'' (IEThingWith (Nothing, l''') twIE@(L _ ie) _ lies')) : xs)
     -- ThingWith ie lies' => ThingWith ie (lies' ++ [child])
     | parent == unIEWrappedName ie
     , child == wildCardSymbol = do
@@ -328,7 +329,7 @@
 #else
         let it' = it{ideclHiding = Just (hide, lies)}
 #endif
-            thing = IEThingWith newl twIE (IEWildcard 2) []
+            thing = IEThingWith (Nothing, newl) twIE (IEWildcard 2) []
             newl = (\ann -> ann ++ [(AddEpAnn AnnDotdot d0)]) <$> l'''
             lies = L l' $ reverse pre ++ [L l'' thing] ++ xs
         return $ L l it'
@@ -355,7 +356,7 @@
         let it' = it{ideclHiding = Just (hide, lies)}
 #endif
             lies = L l' $ reverse pre ++
-                [L l'' (IEThingWith l''' twIE NoIEWildcard (over _last fixLast lies' ++ [childLIE]))] ++ xs
+                [L l'' (IEThingWith (Nothing, l''') twIE NoIEWildcard (over _last fixLast lies' ++ [childLIE]))] ++ xs
             fixLast = if hasSibling then first addComma else id
         return $ L l it'
   go hide l' pre (x : xs) = go hide l' (x : pre) xs
@@ -383,7 +384,7 @@
 #endif
                                              childRdr
           listAnn = epAnn srcParent [AddEpAnn AnnOpenP (epl 1), AddEpAnn AnnCloseP (epl 0)]
-          x :: LIE GhcPs = reLocA $ L l'' $ IEThingWith listAnn parentLIE NoIEWildcard [childLIE]
+          x :: LIE GhcPs = reLocA $ L l'' $ IEThingWith (Nothing, listAnn) parentLIE NoIEWildcard [childLIE]
 
           lies' = addCommaInImportList (reverse pre) x
 #if MIN_VERSION_ghc(9,5,0)
@@ -486,7 +487,7 @@
                                noExtField
 #endif
                                rdr
-      x = reLocA $ L top $ IEVar noExtField lie
+      x = reLocA $ L top $ IEVar Nothing lie
   x <- pure $ if hasSibling then first addComma x else x
   lies <- pure $ over _head (`setEntryDP` SameLine 1) lies
 #if MIN_VERSION_ghc(9,5,0)
diff --color -ur a/src/Development/IDE/Plugin/CodeAction.hs b/src/Development/IDE/Plugin/CodeAction.hs
--- a/src/Development/IDE/Plugin/CodeAction.hs	2001-09-09 03:46:40.000000000 +0200
+++ b/src/Development/IDE/Plugin/CodeAction.hs	2024-01-09 18:08:31.944875634 +0100
@@ -46,7 +46,7 @@
 import           Development.IDE.Core.Service
 import           Development.IDE.Core.Shake                        hiding (Log)
 import           Development.IDE.GHC.Compat                        hiding
-                                                                   (ImplicitPrelude)
+                                                                   (ImplicitPrelude, GRE)
 import           Development.IDE.GHC.Compat.ExactPrint
 import           Development.IDE.GHC.Compat.Util
 import           Development.IDE.GHC.Error
@@ -85,6 +85,7 @@
                                                                     EpaLocation (..),
                                                                     LEpaComment,
                                                                     hsmodAnn)
+import           GHC.Types.Name.Reader
 import           Ide.PluginUtils                                   (extractTextInRange,
                                                                     subRange)
 import           Ide.Types
@@ -417,7 +418,7 @@
               imv_name == mkModuleName modName,
               isTheSameLine imv_span importSpan
           ],
-      [GRE {gre_name = name}] <- lookupGlobalRdrEnv rdrEnv occ,
+      [GRE {gre_name = name}] <- lookupGRE rdrEnv (LookupOccName occ (RelevantGREsFOS WantBoth)),
       importedIdentifier <- Right name,
       refs <- M.lookup importedIdentifier refMap =
       maybe True (not . any (\(_, IdentifierDetails {..}) -> identInfo == S.singleton Use)) refs
